{"version":3,"file":"167.js","sources":["webpack://tansa_app/./src/utils/taxHandler.ts","webpack://tansa_app/./src/utils/number.ts","webpack://tansa_app/./src/components/AnimatedWallet.tsx","webpack://tansa_app/./src/components/SalaryBreakdownTable.tsx","webpack://tansa_app/./src/utils/salaryIncreasment.ts","webpack://tansa_app/./src/components/SalaryIncrementTable.tsx","webpack://tansa_app/./src/components/ConverterDialog.tsx","webpack://tansa_app/./src/App.tsx"],"sourcesContent":["export enum ConversionType {\r\n  GrossToNet = \"gross_to_net\",\r\n  NetToGross = \"net_to_gross\",\r\n}\r\n\r\nexport const PERSONAL_DEDUCTION = 11_000_000;\r\nexport const DEPENDENT_DEDUCTION = 4_400_000;\r\n\r\nexport interface DetailedSalaryBreakdown {\r\n  grossSalary: number;\r\n  socialInsurance: number;\r\n  healthInsurance: number;\r\n  unemploymentInsurance: number;\r\n  totalInsurance: number;\r\n  incomeBeforeTax: number;\r\n  personalDeduction: number;\r\n  dependentDeduction: number;\r\n  taxableIncome: number;\r\n  tax: number;\r\n  netSalary: number;\r\n}\r\n\r\nexport function calculateTax(monthlyTaxableIncome: number): number {\r\n  if (monthlyTaxableIncome <= 0) return 0;\r\n  const annualTaxableIncome = monthlyTaxableIncome * 12;\r\n  let tax = 0;\r\n  if (annualTaxableIncome <= 60_000_000) {\r\n    tax = annualTaxableIncome * 0.05;\r\n  } else if (annualTaxableIncome <= 120_000_000) {\r\n    tax = 60_000_000 * 0.05 + (annualTaxableIncome - 60_000_000) * 0.1;\r\n  } else if (annualTaxableIncome <= 216_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      (annualTaxableIncome - 120_000_000) * 0.15;\r\n  } else if (annualTaxableIncome <= 384_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      (annualTaxableIncome - 216_000_000) * 0.2;\r\n  } else {\r\n    tax =\r\n      (annualTaxableIncome - 384_000_000) * 0.25 +\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      168_000_000 * 0.2;\r\n  }\r\n  return tax / 12;\r\n}\r\n\r\nexport function getDetailedBreakdownFromGross(\r\n  gross: number,\r\n  dependents: number\r\n): DetailedSalaryBreakdown {\r\n  const socialBase = Math.min(gross, 46_800_000);\r\n  const socialInsurance = socialBase * 0.08;\r\n  const healthInsurance = socialBase * 0.015;\r\n  const unemploymentInsurance = Math.min(gross, 99_200_000) * 0.01;\r\n  const totalInsurance = Math.round(\r\n    socialInsurance + healthInsurance + unemploymentInsurance\r\n  );\r\n  const incomeBeforeTax = Math.round(gross - totalInsurance);\r\n  const personalDeduction = PERSONAL_DEDUCTION;\r\n  const dependentDeduction = Math.round(dependents * DEPENDENT_DEDUCTION);\r\n  const taxableIncome = Math.max(\r\n    0,\r\n    incomeBeforeTax - personalDeduction - dependentDeduction\r\n  );\r\n  const tax = calculateTax(taxableIncome);\r\n  return {\r\n    grossSalary: Math.round(gross),\r\n    socialInsurance,\r\n    healthInsurance,\r\n    unemploymentInsurance,\r\n    totalInsurance,\r\n    incomeBeforeTax,\r\n    personalDeduction,\r\n    dependentDeduction,\r\n    taxableIncome,\r\n    tax,\r\n    netSalary: Math.round(incomeBeforeTax - tax),\r\n  };\r\n}\r\n\r\nexport function getDetailedBreakdown(\r\n  salary: number,\r\n  dependents: number,\r\n  inputType: ConversionType\r\n): DetailedSalaryBreakdown {\r\n  if (inputType === ConversionType.GrossToNet) {\r\n    return getDetailedBreakdownFromGross(salary, dependents);\r\n  }\r\n  let grossGuess = salary * 1.2;\r\n  let breakdown = getDetailedBreakdownFromGross(grossGuess, dependents);\r\n  for (let i = 0; i < 100; i++) {\r\n    const error = salary - breakdown.netSalary;\r\n    if (Math.abs(error) < 1) break;\r\n    grossGuess += error;\r\n    breakdown = getDetailedBreakdownFromGross(grossGuess, dependents);\r\n  }\r\n  return breakdown;\r\n}\r\n","export const parseNumber = (value: string | number): number => {\r\n  if (typeof value === \"number\") return value;\r\n  const numericValue = value.replace(/\\D/g, \"\");\r\n  return numericValue ? Number(numericValue) : 0;\r\n};\r\nexport const formatCurrency = (value: string | number) => {\r\n  if (!value) return \"\";\r\n  return Number(value).toLocaleString(\"vi-VN\");\r\n};\r\n","import { motion } from \"framer-motion\";\r\n\r\nconst AnimatedWallet = () => {\r\n  return (\r\n    <motion.svg\r\n      width=\"150\"\r\n      height=\"150\"\r\n      viewBox=\"0 0 24 24\"\r\n      fill=\"none\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      initial={{ scale: 0.9, opacity: 0.7 }}\r\n      animate={{ scale: 1, opacity: 1 }}\r\n      transition={{\r\n        duration: 1.5,\r\n        repeat: Infinity,\r\n        repeatType: \"reverse\",\r\n        ease: \"easeInOut\",\r\n      }}\r\n    >\r\n      <motion.path\r\n        d=\"M3 7H21V18C21 19.1 20.1 20 19 20H5C3.9 20 3 19.1 3 18V7Z\"\r\n        fill=\"#1677ff\"\r\n        stroke=\"#003a8c\"\r\n        strokeWidth=\"1\"\r\n        initial={{ y: 0 }}\r\n        animate={{ y: [0, 2, 0] }}\r\n        transition={{ duration: 2, repeat: Infinity, repeatType: \"reverse\" }}\r\n      />\r\n      <motion.path\r\n        d=\"M16 7V5C16 3.9 15.1 3 14 3H5C3.9 3 3 3.9 3 5V7\"\r\n        fill=\"#69c0ff\"\r\n        stroke=\"#003a8c\"\r\n        strokeWidth=\"1\"\r\n        strokeLinecap=\"round\"\r\n        initial={{ y: 0 }}\r\n        animate={{ y: [-2, 2, -2] }}\r\n        transition={{ duration: 2, repeat: Infinity, repeatType: \"reverse\" }}\r\n      />\r\n      <motion.rect\r\n        x=\"18\"\r\n        y=\"10\"\r\n        width=\"4\"\r\n        height=\"4\"\r\n        fill=\"#52c41a\"\r\n        stroke=\"#003a8c\"\r\n        strokeWidth=\"1\"\r\n        initial={{ scale: 1 }}\r\n        animate={{ scale: [1, 1.2, 1] }}\r\n        transition={{ duration: 1.5, repeat: Infinity, repeatType: \"reverse\" }}\r\n      />\r\n      <circle cx=\"20\" cy=\"12\" r=\"0.5\" fill=\"#fff\" />\r\n    </motion.svg>\r\n  );\r\n};\r\n\r\nexport default AnimatedWallet;\r\n","import { Table, Collapse, Typography, theme } from \"antd\";\r\n\r\nconst { Text } = Typography;\r\nconst { useToken } = theme;\r\n\r\nexport default function SalaryBreakdownTable({\r\n  breakdown,\r\n}: {\r\n  breakdown: any;\r\n}) {\r\n  const { token } = useToken();\r\n\r\n  const dataSource = [\r\n    {\r\n      key: \"gross\",\r\n      label: \"Lương GROSS\",\r\n      value: breakdown.grossSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n    {\r\n      key: \"social\",\r\n      label: \"Bảo hiểm xã hội (8%)\",\r\n      value: breakdown.socialInsurance,\r\n    },\r\n    {\r\n      key: \"health\",\r\n      label: \"Bảo hiểm y tế (1.5%)\",\r\n      value: breakdown.healthInsurance,\r\n    },\r\n    {\r\n      key: \"unemployment\",\r\n      label: \"Bảo hiểm thất nghiệp (1%)\",\r\n      value: breakdown.unemploymentInsurance,\r\n    },\r\n    {\r\n      key: \"incomeBeforeTax\",\r\n      label: \"Thu nhập trước thuế\",\r\n      value: breakdown.incomeBeforeTax,\r\n    },\r\n    {\r\n      key: \"taxableIncome\",\r\n      label: \"Thu nhập chịu thuế\",\r\n      value: breakdown.taxableIncome,\r\n    },\r\n    { key: \"tax\", label: \"Thuế thu nhập cá nhân\", value: breakdown.tax },\r\n    {\r\n      key: \"net\",\r\n      label: \"Lương NET\",\r\n      value: breakdown.netSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Mục\",\r\n      dataIndex: \"label\",\r\n      key: \"label\",\r\n      render: (text: string) => <Text strong>{text}</Text>,\r\n    },\r\n    {\r\n      title: \"Giá trị (VNĐ)\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (value: number, record: any) => (\r\n        <Text style={{ color: record.color || \"inherit\" }}>\r\n          {value.toLocaleString(\"vi-VN\")}\r\n        </Text>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Collapse defaultActiveKey={[\"1\"]} className=\"result-section\">\r\n      <Collapse.Panel header=\"Kết quả\" key=\"1\">\r\n        <Table\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n          bordered\r\n          size=\"small\"\r\n        />\r\n      </Collapse.Panel>\r\n    </Collapse>\r\n  );\r\n}\r\n","import {\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n  getDetailedBreakdown,\r\n} from \"./taxHandler\";\r\n\r\nexport function calculateSalaryIncrements(\r\n  baseSalary: number,\r\n  percentageIncreases: number[],\r\n  conversionType: ConversionType,\r\n  dependents: number = 0\r\n) {\r\n  let adjustedSalary = baseSalary;\r\n  const salaryAdjustments = [];\r\n\r\n  for (const increasePercent of percentageIncreases) {\r\n    adjustedSalary = Math.round(adjustedSalary * (1 + increasePercent / 100));\r\n\r\n    let breakdown: DetailedSalaryBreakdown;\r\n    if (conversionType === ConversionType.GrossToNet) {\r\n      breakdown = getDetailedBreakdown(\r\n        adjustedSalary,\r\n        dependents,\r\n        ConversionType.GrossToNet\r\n      );\r\n    } else {\r\n      breakdown = getDetailedBreakdown(\r\n        adjustedSalary,\r\n        dependents,\r\n        ConversionType.NetToGross\r\n      );\r\n    }\r\n\r\n    salaryAdjustments.push({\r\n      baseSalary,\r\n      increasePercent,\r\n      conversionType,\r\n      newGrossSalary: Math.round(breakdown.grossSalary),\r\n      newNetSalary: Math.round(breakdown.netSalary),\r\n    });\r\n  }\r\n\r\n  return salaryAdjustments;\r\n}\r\n\r\nexport const formatCurrency = (value: string | number) => {\r\n  const number = Number(value.toString().replace(/\\D/g, \"\"));\r\n  return number.toLocaleString(\"vi-VN\");\r\n};\r\n","import { useState } from \"react\";\r\nimport { Table, Input, Typography, Space, Flex, Collapse, Button } from \"antd\";\r\nimport { ConversionType } from \"../utils/taxHandler\";\r\nimport {\r\n  calculateSalaryIncrements,\r\n  formatCurrency,\r\n} from \"../utils/salaryIncreasment\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface SalaryIncrementTableProps {\r\n  baseSalary: number;\r\n  conversionType: ConversionType;\r\n  dependents?: number;\r\n  percentageIncreases?: number[];\r\n}\r\n\r\nexport default function SalaryIncrementTable({\r\n  baseSalary,\r\n  conversionType,\r\n  dependents = 0,\r\n  percentageIncreases = [5, 10, 15, 20, 25, 30, 35, 40, 45, 50],\r\n}: SalaryIncrementTableProps) {\r\n  const [customIncrease, setCustomIncrease] = useState<string>(\"\");\r\n  const [customRow, setCustomRow] = useState<any | null>(null);\r\n\r\n  const increments = calculateSalaryIncrements(\r\n    baseSalary,\r\n    percentageIncreases,\r\n    conversionType,\r\n    dependents\r\n  );\r\n\r\n  const handleCalculateCustomIncrease = () => {\r\n    const parsedIncrease = parseFloat(customIncrease);\r\n    if (!isNaN(parsedIncrease) && parsedIncrease > 0) {\r\n      const newRow = calculateSalaryIncrements(\r\n        baseSalary,\r\n        [parsedIncrease],\r\n        conversionType,\r\n        dependents\r\n      )[0]; // Chỉ lấy hàng đầu tiên\r\n\r\n      setCustomRow(newRow);\r\n    } else {\r\n      setCustomRow(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCustomRow = () => {\r\n    setCustomRow(null);\r\n    setCustomIncrease(\"\");\r\n  };\r\n\r\n  const dataSource = customRow\r\n    ? [\r\n        customRow,\r\n        ...increments.filter(\r\n          (row) => row.increasePercent !== customRow.increasePercent\r\n        ),\r\n      ]\r\n    : increments;\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Tỉ lệ tăng (%)\",\r\n      dataIndex: \"increasePercent\",\r\n      key: \"increasePercent\",\r\n      render: (value: number, record: any) => (\r\n        <Text strong={record === customRow}>{value}%</Text>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Lương GROSS (VND)\",\r\n      dataIndex: \"newGrossSalary\",\r\n      key: \"newGrossSalary\",\r\n      render: (value: number, record: any) => (\r\n        <Text strong={record === customRow}>{formatCurrency(value)}</Text>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Lương NET (VND)\",\r\n      dataIndex: \"newNetSalary\",\r\n      key: \"newNetSalary\",\r\n      render: (value: number, record: any) => (\r\n        <Text strong={record === customRow}>{formatCurrency(value)}</Text>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Thao tác\",\r\n      key: \"actions\",\r\n      render: (_: any, record: any) =>\r\n        record === customRow ? (\r\n          <Button danger size=\"small\" onClick={handleDeleteCustomRow}>\r\n            Xoá\r\n          </Button>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Collapse className=\"result-section\">\r\n      <Collapse.Panel header=\"Xem mức lương có thể tăng\" key=\"1\">\r\n        <Flex vertical gap={16}>\r\n          <Flex gap={8} style={{ width: \"100%\" }}>\r\n            <Input\r\n              type=\"number\"\r\n              placeholder=\"Nhập tỉ lệ % mong muốn\"\r\n              value={customIncrease}\r\n              onChange={(e) => setCustomIncrease(e.target.value)}\r\n              style={{ flex: 1 }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={handleCalculateCustomIncrease}\r\n              style={{ flex: 0.2 }}\r\n            >\r\n              Tính\r\n            </Button>\r\n          </Flex>\r\n\r\n          <Table\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={false}\r\n            bordered\r\n            rowKey=\"increasePercent\"\r\n          />\r\n        </Flex>\r\n      </Collapse.Panel>\r\n    </Collapse>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Input,\r\n  Radio,\r\n  Typography,\r\n  Flex,\r\n  Space,\r\n  Divider,\r\n  Grid,\r\n} from \"antd\";\r\nimport {\r\n  getDetailedBreakdown,\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n} from \"../utils/taxHandler\";\r\nimport { parseNumber, formatCurrency } from \"../utils/number\";\r\nimport \"antd/dist/reset.css\";\r\nimport AnimatedWallet from \"./AnimatedWallet\";\r\nimport SalaryBreakdownTable from \"./SalaryBreakdownTable\";\r\nimport SalaryIncrementTable from \"./SalaryIncrementTable\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst { Title, Text } = Typography;\r\nconst { useBreakpoint } = Grid; // Hook để lấy kích thước màn hình\r\n\r\nexport default function SalaryConverter() {\r\n  const [salary, setSalary] = useState<number | string>(\"\");\r\n  const [dependents, setDependents] = useState<number | string>(\"\");\r\n  const [type, setType] = useState<ConversionType>(ConversionType.GrossToNet);\r\n  const [breakdown, setBreakdown] = useState<DetailedSalaryBreakdown | null>(\r\n    null\r\n  );\r\n\r\n  const screens = useBreakpoint(); // Lấy kích thước màn hình\r\n\r\n  const handleConvert = () => {\r\n    const parsedSalary = Number(salary);\r\n    const parsedDependents = Number(dependents);\r\n\r\n    if (isNaN(parsedSalary) || parsedSalary <= 0) return;\r\n    const validDependents = isNaN(parsedDependents) ? 0 : parsedDependents;\r\n\r\n    const result = getDetailedBreakdown(parsedSalary, validDependents, type);\r\n    setBreakdown(result);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      justify=\"center\"\r\n      align=\"center\"\r\n      className=\"salary-converter-container\"\r\n    >\r\n      <Card className=\"salary-converter-card\">\r\n        <Flex\r\n          gap={32}\r\n          wrap=\"wrap\"\r\n          vertical={screens.md ? false : true}\r\n          style={{ width: \"100%\" }}\r\n        >\r\n          <Flex vertical flex={1} className=\"salary-converter-column-left\">\r\n            <Title level={2} style={{ textAlign: \"center\" }}>\r\n              TANSA\r\n            </Title>\r\n            <Text type=\"secondary\" style={{ textAlign: \"center\" }}>\r\n              Công cụ tính lương GROSS, NET chính xác\r\n            </Text>\r\n\r\n            <Divider />\r\n\r\n            <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Nhập mức lương (VNĐ):</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={formatCurrency(salary)}\r\n                  onChange={(e) => setSalary(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Số người phụ thuộc:</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={formatCurrency(dependents)}\r\n                  onChange={(e) => setDependents(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Loại chuyển đổi:</Text>\r\n                <Radio.Group\r\n                  value={type}\r\n                  onChange={(e) => setType(e.target.value)}\r\n                >\r\n                  <Space>\r\n                    <Radio value={ConversionType.GrossToNet}>GROSS ➜ NET</Radio>\r\n                    <Radio value={ConversionType.NetToGross}>NET ➜ GROSS</Radio>\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Space>\r\n\r\n              <Button type=\"primary\" block onClick={handleConvert}>\r\n                Chuyển đổi\r\n              </Button>\r\n            </Space>\r\n          </Flex>\r\n\r\n          <Flex\r\n            vertical\r\n            flex={1}\r\n            align=\"center\"\r\n            justify=\"center\"\r\n            className=\"salary-converter-column-right\"\r\n          >\r\n            {breakdown ? (\r\n              <motion.div\r\n                initial={{ opacity: 0, y: -10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.5 }}\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <SalaryBreakdownTable breakdown={breakdown} />\r\n                <SalaryIncrementTable\r\n                  baseSalary={parseNumber(salary)}\r\n                  conversionType={type}\r\n                  dependents={Number(dependents) || 0}\r\n                />\r\n              </motion.div>\r\n            ) : (\r\n              <AnimatedWallet />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Card>\r\n    </Flex>\r\n  );\r\n}\r\n","import ReactDOM from \"react-dom/client\";\n\nimport \"./index.css\";\nimport SalaryConverter from \"./components/ConverterDialog\";\n\nconst App = () => (\n  <div className=\"container\">\n    <SalaryConverter />\n  </div>\n);\n\nconst root = ReactDOM.createRoot(document.getElementById(\"app\") as HTMLElement);\n\nroot.render(<App />);\n"],"names":["ConversionType","getDetailedBreakdownFromGross","gross","dependents","socialBase","Math","socialInsurance","healthInsurance","unemploymentInsurance","totalInsurance","incomeBeforeTax","dependentDeduction","taxableIncome","tax","calculateTax","monthlyTaxableIncome","annualTaxableIncome","personalDeduction","getDetailedBreakdown","salary","inputType","grossGuess","breakdown","i","error","parseNumber","value","numericValue","Number","formatCurrency","motion","Infinity","Text","Typography","useToken","theme","SalaryBreakdownTable","param","token","dataSource","columns","text","record","Collapse","Table","calculateSalaryIncrements","baseSalary","percentageIncreases","conversionType","adjustedSalary","salaryAdjustments","increasePercent","number","SalaryIncrementTable","customIncrease","setCustomIncrease","useState","customRow","setCustomRow","increments","handleDeleteCustomRow","row","_","Button","Flex","Input","e","parsedIncrease","parseFloat","isNaN","Title","useBreakpoint","Grid","SalaryConverter","setSalary","setDependents","type","setType","setBreakdown","screens","Card","Divider","Space","Radio","parsedSalary","parsedDependents","AnimatedWallet","root","ReactDOM","document","App"],"mappings":"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"}