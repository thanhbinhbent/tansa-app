{"version":3,"file":"10.js","sources":["webpack://tansa_app/./src/utils/taxHandler.ts","webpack://tansa_app/./src/utils/currency.ts","webpack://tansa_app/./src/components/AnimatedWallet.tsx","webpack://tansa_app/./src/components/SalaryBreakdownTable.tsx","webpack://tansa_app/./src/utils/salaryIncreasment.ts","webpack://tansa_app/./src/components/SalaryIncrementTable.tsx","webpack://tansa_app/./src/components/ConverterDialog.tsx","webpack://tansa_app/./src/App.tsx"],"sourcesContent":["export enum ConversionType {\r\n  GrossToNet = \"gross_to_net\",\r\n  NetToGross = \"net_to_gross\",\r\n}\r\n\r\nexport const PERSONAL_DEDUCTION = 11_000_000;\r\nexport const DEPENDENT_DEDUCTION = 4_400_000;\r\n\r\nexport interface DetailedSalaryBreakdown {\r\n  grossSalary: number;\r\n  socialInsurance: number;\r\n  healthInsurance: number;\r\n  unemploymentInsurance: number;\r\n  totalInsurance: number;\r\n  incomeBeforeTax: number;\r\n  personalDeduction: number;\r\n  dependentDeduction: number;\r\n  taxableIncome: number;\r\n  tax: number;\r\n  netSalary: number;\r\n}\r\n\r\nexport function calculateTax(monthlyTaxableIncome: number): number {\r\n  if (monthlyTaxableIncome <= 0) return 0;\r\n  const annualTaxableIncome = monthlyTaxableIncome * 12;\r\n  let tax = 0;\r\n  if (annualTaxableIncome <= 60_000_000) {\r\n    tax = annualTaxableIncome * 0.05;\r\n  } else if (annualTaxableIncome <= 120_000_000) {\r\n    tax = 60_000_000 * 0.05 + (annualTaxableIncome - 60_000_000) * 0.1;\r\n  } else if (annualTaxableIncome <= 216_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      (annualTaxableIncome - 120_000_000) * 0.15;\r\n  } else if (annualTaxableIncome <= 384_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      (annualTaxableIncome - 216_000_000) * 0.2;\r\n  } else {\r\n    tax =\r\n      (annualTaxableIncome - 384_000_000) * 0.25 +\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      168_000_000 * 0.2;\r\n  }\r\n  return tax / 12;\r\n}\r\n\r\nexport function getDetailedBreakdownFromGross(\r\n  gross: number,\r\n  dependents: number,\r\n  insuranceSalary: number = gross\r\n): DetailedSalaryBreakdown {\r\n  const socialBase = Math.min(insuranceSalary, 46_800_000);\r\n  const socialInsurance = socialBase * 0.08;\r\n  const healthInsurance = socialBase * 0.015;\r\n  const unemploymentInsurance = Math.min(insuranceSalary, 99_200_000) * 0.01;\r\n  const totalInsurance = Math.round(\r\n    socialInsurance + healthInsurance + unemploymentInsurance\r\n  );\r\n  const incomeBeforeTax = Math.round(gross - totalInsurance);\r\n  const personalDeduction = PERSONAL_DEDUCTION;\r\n  const dependentDeduction = Math.round(dependents * DEPENDENT_DEDUCTION);\r\n  const taxableIncome = Math.max(\r\n    0,\r\n    incomeBeforeTax - personalDeduction - dependentDeduction\r\n  );\r\n  const tax = calculateTax(taxableIncome);\r\n  return {\r\n    grossSalary: Math.round(gross),\r\n    socialInsurance,\r\n    healthInsurance,\r\n    unemploymentInsurance,\r\n    totalInsurance,\r\n    incomeBeforeTax,\r\n    personalDeduction,\r\n    dependentDeduction,\r\n    taxableIncome,\r\n    tax,\r\n    netSalary: Math.round(incomeBeforeTax - tax),\r\n  };\r\n}\r\n\r\nexport function getDetailedBreakdown(\r\n  salary: number,\r\n  dependents: number,\r\n  inputType: ConversionType,\r\n  insuranceSalary: number = salary\r\n): DetailedSalaryBreakdown {\r\n  if (inputType === ConversionType.GrossToNet) {\r\n    return getDetailedBreakdownFromGross(salary, dependents, insuranceSalary);\r\n  }\r\n  let grossGuess = salary * 1.2;\r\n  let breakdown = getDetailedBreakdownFromGross(\r\n    grossGuess,\r\n    dependents,\r\n    insuranceSalary\r\n  );\r\n  for (let i = 0; i < 100; i++) {\r\n    const error = salary - breakdown.netSalary;\r\n    if (Math.abs(error) < 1) break;\r\n    grossGuess += error;\r\n    breakdown = getDetailedBreakdownFromGross(\r\n      grossGuess,\r\n      dependents,\r\n      insuranceSalary\r\n    );\r\n  }\r\n  return breakdown;\r\n}\r\n","import axios from \"axios\";\r\nimport { XMLParser } from \"fast-xml-parser\";\r\n\r\nconst parser = new XMLParser();\r\n\r\nexport enum Currency {\r\n  AUD = \"AUSTRALIAN DOLLAR\",\r\n  CAD = \"CANADIAN DOLLAR\",\r\n  CHF = \"SWISS FRANC\",\r\n  CNY = \"YUAN RENMINBI\",\r\n  DKK = \"DANISH KRONE\",\r\n  EUR = \"EURO\",\r\n  GBP = \"POUND STERLING\",\r\n  HKD = \"HONGKONG DOLLAR\",\r\n  INR = \"INDIAN RUPEE\",\r\n  JPY = \"YEN\",\r\n  KRW = \"KOREAN WON\",\r\n  KWD = \"KUWAITI DINAR\",\r\n  MYR = \"MALAYSIAN RINGGIT\",\r\n  NOK = \"NORWEGIAN KRONER\",\r\n  RUB = \"RUSSIAN RUBLE\",\r\n  SAR = \"SAUDI RIAL\",\r\n  SEK = \"SWEDISH KRONA\",\r\n  SGD = \"SINGAPORE DOLLAR\",\r\n  THB = \"THAILAND BAHT\",\r\n  USD = \"US DOLLAR\",\r\n}\r\n\r\nexport const parseNumber = (value: string | number): number => {\r\n  if (typeof value === \"number\") return value;\r\n  const numericValue = value.replace(/\\D/g, \"\");\r\n  return numericValue ? Number(numericValue) : 0;\r\n};\r\n\r\nconst EXCHANGE_RATE_API =\r\n  \"https://portal.vietcombank.com.vn/Usercontrols/TVPortal.TyGia/pXML.aspx\";\r\nconst LOCAL_STORAGE_KEY = \"exchangeRates\";\r\n\r\nexport async function getExchangeRates(\r\n  setExchangeRates: (rates: Record<string, number>) => void\r\n) {\r\n  console.log(\"Fetching latest exchange rates...\");\r\n\r\n  try {\r\n    const response = await axios.get(EXCHANGE_RATE_API, { timeout: 10000 });\r\n\r\n    const cleanXML = response.data.replace(/<!--[\\s\\S]*?-->/g, \"\");\r\n\r\n    const parser = new XMLParser({\r\n      ignoreAttributes: false,\r\n      attributeNamePrefix: \"\",\r\n    });\r\n    const result = parser.parse(cleanXML);\r\n\r\n    if (!result.ExrateList || !result.ExrateList.Exrate) {\r\n      throw new Error(\"Invalid XML format\");\r\n    }\r\n\r\n    const exrates = Array.isArray(result.ExrateList.Exrate)\r\n      ? result.ExrateList.Exrate\r\n      : [result.ExrateList.Exrate];\r\n\r\n    const exchangeRates: Record<string, number> = {};\r\n    exrates.forEach((exrate: any) => {\r\n      if (exrate.CurrencyCode && exrate.Sell && exrate.Sell !== \"-\") {\r\n        exchangeRates[exrate.CurrencyCode] = parseFloat(\r\n          exrate.Sell.replace(/,/g, \"\")\r\n        );\r\n      }\r\n    });\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(exchangeRates));\r\n    setExchangeRates(exchangeRates);\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch exchange rates:\", error);\r\n  }\r\n}\r\n\r\nexport function convertAmount(\r\n  amount: number,\r\n  exchangeRates: Record<string, number>,\r\n  currency: string\r\n) {\r\n  const rate = exchangeRates[currency];\r\n  if (!rate) return \"N/A\";\r\n  return (amount / rate).toFixed(2);\r\n}\r\n\r\nexport const formatCurrency = (value: string | number) => {\r\n  if (!value) return \"\";\r\n  return Number(value).toLocaleString(\"vi-VN\");\r\n};\r\n","import { motion } from \"framer-motion\";\r\n\r\nconst AnimatedWallet = () => {\r\n  return (\r\n    <motion.svg\r\n      className=\"text-gray-800 dark:text-white\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"200\"\r\n      height=\"200\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      initial={{ opacity: 0, scale: 0.5 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      {/* Gradient màu động với màu chủ đạo của Ant Design */}\r\n      <defs>\r\n        <linearGradient id=\"gradientColor\" gradientTransform=\"rotate(0)\">\r\n          <motion.stop\r\n            offset=\"0%\"\r\n            stopColor=\"#1677ff\"\r\n            animate={{ stopColor: [\"#1677ff\", \"#69b1ff\", \"#1677ff\"] }}\r\n            transition={{\r\n              duration: 3,\r\n              repeat: Infinity,\r\n              ease: \"linear\",\r\n              repeatType: \"mirror\",\r\n            }}\r\n          />\r\n          <motion.stop\r\n            offset=\"100%\"\r\n            stopColor=\"#69b1ff\"\r\n            animate={{ stopColor: [\"#69b1ff\", \"#1677ff\", \"#69b1ff\"] }}\r\n            transition={{\r\n              duration: 3,\r\n              repeat: Infinity,\r\n              ease: \"linear\",\r\n              repeatType: \"mirror\",\r\n            }}\r\n          />\r\n        </linearGradient>\r\n      </defs>\r\n\r\n      <motion.path\r\n        stroke=\"url(#gradientColor)\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth=\"1.3\" // Giảm stroke nhỏ hơn\r\n        d=\"M13.6 16.733c.234.269.548.456.895.534a1.4 1.4 0 0 0 1.75-.762c.172-.615-.446-1.287-1.242-1.481-.796-.194-1.41-.861-1.241-1.481a1.4 1.4 0 0 1 1.75-.762c.343.077.654.26.888.524m-1.358 4.017v.617m0-5.939v.725M4 15v4m3-6v6M6 8.5 10.5 5 14 7.5 18 4m0 0h-3.5M18 4v3m2 8a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z\"\r\n        initial={{ pathLength: 0, opacity: 0 }}\r\n        animate={{ pathLength: 1, opacity: 1 }}\r\n        transition={{ duration: 1.5, ease: \"easeInOut\" }}\r\n      />\r\n    </motion.svg>\r\n  );\r\n};\r\n\r\nexport default AnimatedWallet;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Table, Typography, theme } from \"antd\";\r\nimport { convertAmount } from \"../utils/currency\";\r\n\r\nconst { Text } = Typography;\r\nconst { useToken } = theme;\r\n\r\nexport default function SalaryBreakdownTable({\r\n  breakdown,\r\n}: {\r\n  breakdown: any;\r\n}) {\r\n  const { token } = useToken();\r\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\r\n    {}\r\n  );\r\n  const [selectedCurrency, setSelectedCurrency] = useState<string>(\r\n    localStorage.getItem(\"selectedCurrency\") || \"USD\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    const cachedRates = localStorage.getItem(\"exchangeRates\");\r\n    if (cachedRates) {\r\n      setExchangeRates(JSON.parse(cachedRates));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (breakdown) {\r\n      setExchangeRates((prevRates) => ({ ...prevRates }));\r\n    }\r\n  }, [breakdown]);\r\n\r\n  const dataSource = [\r\n    {\r\n      key: \"gross\",\r\n      label: \"Lương GROSS\",\r\n      value: breakdown?.grossSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n    {\r\n      key: \"social\",\r\n      label: \"Bảo hiểm xã hội (8%)\",\r\n      value: breakdown?.socialInsurance,\r\n    },\r\n    {\r\n      key: \"health\",\r\n      label: \"Bảo hiểm y tế (1.5%)\",\r\n      value: breakdown?.healthInsurance,\r\n    },\r\n    {\r\n      key: \"unemployment\",\r\n      label: \"Bảo hiểm thất nghiệp (1%)\",\r\n      value: breakdown?.unemploymentInsurance,\r\n    },\r\n    {\r\n      key: \"incomeBeforeTax\",\r\n      label: \"Thu nhập trước thuế\",\r\n      value: breakdown?.incomeBeforeTax,\r\n    },\r\n    {\r\n      key: \"taxableIncome\",\r\n      label: \"Thu nhập chịu thuế\",\r\n      value: breakdown?.taxableIncome,\r\n    },\r\n    { key: \"tax\", label: \"Thuế thu nhập cá nhân\", value: breakdown?.tax },\r\n    {\r\n      key: \"net\",\r\n      label: \"Lương NET\",\r\n      value: breakdown?.netSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Mục\",\r\n      dataIndex: \"label\",\r\n      key: \"label\",\r\n      render: (text: string) => <Text strong>{text}</Text>,\r\n    },\r\n    {\r\n      title: \"Giá trị\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (value: number, record: { key: string }) => {\r\n        const isGrossOrNet = record.key === \"gross\" || record.key === \"net\";\r\n        return (\r\n          <div>\r\n            <Text\r\n              strong={isGrossOrNet}\r\n              style={{\r\n                color: isGrossOrNet ? token.colorPrimary : \"inherit\",\r\n                fontSize: isGrossOrNet ? \"16px\" : \"14px\",\r\n              }}\r\n            >\r\n              {value?.toLocaleString(\"vi-VN\")} VNĐ\r\n            </Text>\r\n            <br />\r\n            <Text type=\"secondary\">\r\n              {exchangeRates[selectedCurrency]\r\n                ? `${convertAmount(\r\n                    value || 0,\r\n                    exchangeRates,\r\n                    selectedCurrency\r\n                  )} ${selectedCurrency}`\r\n                : \"Đang tải...\"}\r\n            </Text>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Table\r\n      dataSource={dataSource}\r\n      columns={columns}\r\n      pagination={false}\r\n      bordered\r\n      size=\"small\"\r\n    />\r\n  );\r\n}\r\n","import {\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n  getDetailedBreakdownFromGross,\r\n  getDetailedBreakdown,\r\n} from \"./taxHandler\";\r\n\r\nexport function calculateSalaryIncrements(\r\n  baseSalary: number,\r\n  percentageIncreases: number[],\r\n  conversionType: ConversionType,\r\n  dependents: number = 0\r\n) {\r\n  const salaryAdjustments = [];\r\n\r\n  for (const increasePercent of percentageIncreases) {\r\n    const newGrossSalary = Math.round(baseSalary * (1 + increasePercent / 100));\r\n\r\n    let breakdown: DetailedSalaryBreakdown;\r\n    if (conversionType === ConversionType.GrossToNet) {\r\n      breakdown = getDetailedBreakdownFromGross(newGrossSalary, dependents);\r\n    } else {\r\n      breakdown = getDetailedBreakdown(\r\n        newGrossSalary,\r\n        dependents,\r\n        ConversionType.NetToGross\r\n      );\r\n    }\r\n\r\n    salaryAdjustments.push({\r\n      baseSalary,\r\n      increasePercent,\r\n      conversionType,\r\n      newGrossSalary: Math.round(breakdown.grossSalary),\r\n      newNetSalary: Math.round(breakdown.netSalary),\r\n    });\r\n  }\r\n\r\n  return salaryAdjustments;\r\n}\r\n\r\nexport const formatCurrency = (value: string | number) => {\r\n  const number = Number(value.toString().replace(/\\D/g, \"\"));\r\n  return number.toLocaleString(\"vi-VN\");\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Table, Input, Typography, Space, Flex, Collapse, Button } from \"antd\";\r\nimport { ConversionType } from \"../utils/taxHandler\";\r\nimport { calculateSalaryIncrements } from \"../utils/salaryIncreasment\";\r\nimport { convertAmount, getExchangeRates } from \"../utils/currency\";\r\nimport { DeleteOutlined } from \"@ant-design/icons\";\r\nimport { motion, AnimatePresence } from \"framer-motion\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface SalaryIncrementTableProps {\r\n  baseSalary: number;\r\n  conversionType: ConversionType;\r\n  dependents?: number;\r\n  percentageIncreases?: number[];\r\n}\r\n\r\nexport default function SalaryIncrementTable({\r\n  baseSalary,\r\n  conversionType,\r\n  dependents = 0,\r\n  percentageIncreases = [10, 20, 30],\r\n}: SalaryIncrementTableProps) {\r\n  const [customIncrease, setCustomIncrease] = useState<string>(\"\");\r\n  const [customRows, setCustomRows] = useState<any[]>([]);\r\n  const [selectedCurrency, setSelectedCurrency] = useState<string>(\r\n    localStorage.getItem(\"selectedCurrency\") || \"USD\"\r\n  );\r\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\r\n    {}\r\n  );\r\n  const [hoveredRowKey, setHoveredRowKey] = useState<string | null>(null);\r\n  const [deletedRowKeys, setDeletedRowKeys] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    getExchangeRates(setExchangeRates);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (customRows.length > 0) {\r\n      const updatedRows = customRows.map((row) => {\r\n        const updated = calculateSalaryIncrements(\r\n          baseSalary,\r\n          [row.increasePercent],\r\n          conversionType,\r\n          dependents\r\n        )[0];\r\n        return Object.assign({}, updated, {\r\n          isCustom: true,\r\n          key: row.key,\r\n        }) as any;\r\n      });\r\n      setCustomRows(updatedRows);\r\n    }\r\n  }, [baseSalary, conversionType, dependents]);\r\n\r\n  const handleCalculateCustomIncrease = () => {\r\n    const parsedIncrease = parseFloat(customIncrease);\r\n    if (!isNaN(parsedIncrease) && parsedIncrease > 0) {\r\n      const newRow = calculateSalaryIncrements(\r\n        baseSalary,\r\n        [parsedIncrease],\r\n        conversionType,\r\n        dependents\r\n      )[0];\r\n\r\n      const rowWithExtras = Object.assign({}, newRow, {\r\n        isCustom: true,\r\n        key: uuidv4(),\r\n      }) as any;\r\n      setCustomRows((prevRows) => [rowWithExtras, ...prevRows]);\r\n      setCustomIncrease(\"\");\r\n    }\r\n  };\r\n\r\n  const handleDeleteRow = (key: string) => {\r\n    setDeletedRowKeys((prev) => [...prev, key]);\r\n\r\n    setCustomRows((prevRows) => prevRows.filter((row) => row.key !== key));\r\n  };\r\n\r\n  const defaultData = calculateSalaryIncrements(\r\n    baseSalary,\r\n    percentageIncreases,\r\n    conversionType,\r\n    dependents\r\n  ).map(\r\n    (row, index) =>\r\n      Object.assign({}, row, {\r\n        key: `default-${row.increasePercent}-${index}`,\r\n      }) as any\r\n  );\r\n\r\n  const combinedData = [...customRows, ...defaultData];\r\n\r\n  const dataSource = combinedData.filter(\r\n    (row) => !deletedRowKeys.includes(row.key)\r\n  );\r\n\r\n  const columns = [\r\n    {\r\n      title: \"(%) tăng\",\r\n      dataIndex: \"increasePercent\",\r\n      key: \"increasePercent\",\r\n      render: (value: number, record: any) => (\r\n        <Text strong={record.isCustom}>{value}%</Text>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Giá trị (VND)\",\r\n      key: \"salaryDetails\",\r\n      render: (_: any, record: any) => (\r\n        <div style={{ position: \"relative\" }}>\r\n          <Space direction=\"vertical\">\r\n            <Text strong={record.isCustom}>\r\n              GROSS: {record.newGrossSalary.toLocaleString(\"vi-VN\")}\r\n            </Text>\r\n            <Text type=\"secondary\">\r\n              {exchangeRates[selectedCurrency]\r\n                ? convertAmount(\r\n                    record.newGrossSalary,\r\n                    exchangeRates,\r\n                    selectedCurrency\r\n                  )\r\n                : \"Đang tải...\"}{\" \"}\r\n              {selectedCurrency}\r\n            </Text>\r\n            <Text strong={record.isCustom}>\r\n              NET: {record.newNetSalary.toLocaleString(\"vi-VN\")}\r\n            </Text>\r\n            <Text type=\"secondary\">\r\n              {exchangeRates[selectedCurrency]\r\n                ? convertAmount(\r\n                    record.newNetSalary,\r\n                    exchangeRates,\r\n                    selectedCurrency\r\n                  )\r\n                : \"Đang tải...\"}{\" \"}\r\n              {selectedCurrency}\r\n            </Text>\r\n          </Space>\r\n          <AnimatePresence>\r\n            {hoveredRowKey === record.key && (\r\n              <motion.div\r\n                initial={{ opacity: 0 }}\r\n                animate={{ opacity: 1 }}\r\n                exit={{ opacity: 0 }}\r\n                style={{\r\n                  position: \"absolute\",\r\n                  right: 8,\r\n                  top: \"50%\",\r\n                  transform: \"translateY(-50%)\",\r\n                }}\r\n              >\r\n                <Button\r\n                  danger\r\n                  type=\"text\"\r\n                  icon={<DeleteOutlined style={{ color: \"#ff4d4f\" }} />}\r\n                  style={{\r\n                    backgroundColor: \"#fff1f0\",\r\n                    borderRadius: 4,\r\n                    padding: 4,\r\n                  }}\r\n                  onClick={() => handleDeleteRow(record.key)}\r\n                />\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Flex vertical gap={16}>\r\n      <Flex gap={8} style={{ width: \"100%\" }}>\r\n        <Input\r\n          type=\"number\"\r\n          placeholder=\"Nhập tỉ lệ % mong muốn\"\r\n          value={customIncrease}\r\n          onChange={(e) => setCustomIncrease(e.target.value)}\r\n          style={{ flex: 1 }}\r\n        />\r\n        <Button\r\n          type=\"primary\"\r\n          onClick={handleCalculateCustomIncrease}\r\n          style={{ flex: 0.2 }}\r\n        >\r\n          Tính\r\n        </Button>\r\n      </Flex>\r\n      <Table\r\n        dataSource={dataSource}\r\n        columns={columns}\r\n        pagination={false}\r\n        bordered\r\n        rowKey=\"key\"\r\n        onRow={(record) => ({\r\n          onMouseEnter: () => setHoveredRowKey(record.key),\r\n          onMouseLeave: () => setHoveredRowKey(null),\r\n        })}\r\n      />\r\n    </Flex>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Input,\r\n  Radio,\r\n  Typography,\r\n  Space,\r\n  Divider,\r\n  Grid,\r\n  Tooltip,\r\n  Collapse,\r\n} from \"antd\";\r\nimport {\r\n  getDetailedBreakdown,\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n} from \"../utils/taxHandler\";\r\nimport { parseNumber, formatCurrency } from \"../utils/currency\";\r\nimport \"antd/dist/reset.css\";\r\nimport AnimatedWallet from \"./AnimatedWallet\";\r\nimport SalaryBreakdownTable from \"./SalaryBreakdownTable\";\r\nimport SalaryIncrementTable from \"./SalaryIncrementTable\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst { Title, Text } = Typography;\r\nconst { useBreakpoint } = Grid;\r\n\r\nexport default function SalaryConverter() {\r\n  const [salary, setSalary] = useState<number | string>(\"\");\r\n  const [dependents, setDependents] = useState<number | string>(\"\");\r\n  const [type, setType] = useState(ConversionType.GrossToNet);\r\n  const [breakdown, setBreakdown] = useState<DetailedSalaryBreakdown | null>(\r\n    null\r\n  );\r\n  const [insuranceSalary, setInsuranceSalary] = useState<number | undefined>(\r\n    undefined\r\n  );\r\n  const [hasCalculated, setHasCalculated] = useState(false);\r\n\r\n  const screens = useBreakpoint();\r\n\r\n  useEffect(() => {\r\n    if (!hasCalculated) return;\r\n\r\n    const parsedSalary = Number(salary);\r\n    const parsedDependents = Number(dependents);\r\n    const parsedInsuranceSalary =\r\n      insuranceSalary !== undefined ? Number(insuranceSalary) : undefined;\r\n\r\n    if (!isNaN(parsedSalary) && parsedSalary > 0) {\r\n      const validDependents = isNaN(parsedDependents) ? 0 : parsedDependents;\r\n      const validInsuranceSalary =\r\n        parsedInsuranceSalary !== undefined && !isNaN(parsedInsuranceSalary)\r\n          ? parsedInsuranceSalary\r\n          : parsedSalary;\r\n\r\n      const result = getDetailedBreakdown(\r\n        parsedSalary,\r\n        validDependents,\r\n        type,\r\n        validInsuranceSalary\r\n      );\r\n      setBreakdown(result);\r\n    } else {\r\n      setBreakdown(null);\r\n    }\r\n  }, [salary, dependents, type, insuranceSalary, hasCalculated]);\r\n\r\n  const handleCalculate = () => {\r\n    const parsedSalary = Number(salary);\r\n    const parsedDependents = Number(dependents);\r\n    const parsedInsuranceSalary =\r\n      insuranceSalary !== undefined ? Number(insuranceSalary) : undefined;\r\n\r\n    if (!isNaN(parsedSalary) && parsedSalary > 0) {\r\n      const validDependents = isNaN(parsedDependents) ? 0 : parsedDependents;\r\n      const validInsuranceSalary =\r\n        parsedInsuranceSalary !== undefined && !isNaN(parsedInsuranceSalary)\r\n          ? parsedInsuranceSalary\r\n          : parsedSalary;\r\n\r\n      const result = getDetailedBreakdown(\r\n        parsedSalary,\r\n        validDependents,\r\n        type,\r\n        validInsuranceSalary\r\n      );\r\n      setBreakdown(result);\r\n      setHasCalculated(true);\r\n    } else {\r\n      setBreakdown(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: -10 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      transition={{ duration: 0.5 }}\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        padding: \"20px\",\r\n      }}\r\n    >\r\n      <Card>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            gap: \"32px\",\r\n            flexWrap: \"wrap\",\r\n            flexDirection: screens.md ? \"row\" : \"column\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <div style={{ maxWidth: screens.md ? \"320px\" : \"100%\" }}>\r\n            <Title level={2} style={{ textAlign: \"center\" }}>\r\n              TANSA\r\n            </Title>\r\n            <Text\r\n              type=\"secondary\"\r\n              style={{ textAlign: \"center\", display: \"block\", width: \"100%\" }}\r\n            >\r\n              Công cụ tính lương GROSS, NET chính xác\r\n            </Text>\r\n            <Divider />\r\n            <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Nhập mức lương (VNĐ):</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={salary !== \"\" ? formatCurrency(salary) : \"\"}\r\n                  onChange={(e) => setSalary(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Số người phụ thuộc:</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={dependents !== \"\" ? formatCurrency(dependents) : \"\"}\r\n                  onChange={(e) => setDependents(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Tooltip title=\"Chỉ nhập trong trường hợp lương đóng bảo hiểm khác với lương thực tế.\">\r\n                  <Text strong>Mức lương đóng bảo hiểm:</Text>\r\n                </Tooltip>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={\r\n                    insuranceSalary !== undefined\r\n                      ? formatCurrency(insuranceSalary)\r\n                      : \"\"\r\n                  }\r\n                  onChange={(e) => {\r\n                    const inputValue = e.target.value;\r\n                    const parsedValue = parseNumber(inputValue);\r\n                    setInsuranceSalary(\r\n                      inputValue === \"\" || parsedValue === null\r\n                        ? undefined\r\n                        : parsedValue\r\n                    );\r\n                  }}\r\n                />\r\n              </Space>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Loại chuyển đổi:</Text>\r\n                <Radio.Group\r\n                  value={type}\r\n                  onChange={(e) => setType(e.target.value)}\r\n                >\r\n                  <Space direction=\"vertical\">\r\n                    <Radio value={ConversionType.GrossToNet}>GROSS ➜ NET</Radio>\r\n                    <Radio value={ConversionType.NetToGross}>NET ➜ GROSS</Radio>\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Space>\r\n              {!hasCalculated && (\r\n                <Button type=\"primary\" onClick={handleCalculate} block>\r\n                  Chuyển đổi\r\n                </Button>\r\n              )}\r\n            </Space>\r\n          </div>\r\n\r\n          {breakdown ? (\r\n            <>\r\n              <motion.div\r\n                initial={{ opacity: 0, y: -10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.5 }}\r\n                style={{ flex: 1 }}\r\n              >\r\n                <Collapse\r\n                  defaultActiveKey={[\"1\"]}\r\n                  style={{\r\n                    minWidth: screens.md ? \"400px\" : \"100%\",\r\n                  }}\r\n                  items={[\r\n                    {\r\n                      key: \"1\",\r\n                      label: \"Kết quả\",\r\n                      children: <SalaryBreakdownTable breakdown={breakdown} />,\r\n                    },\r\n                  ]}\r\n                />\r\n              </motion.div>\r\n              <motion.div\r\n                initial={{ opacity: 0, y: -10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.5, delay: 0.1 }}\r\n                style={{ flex: 1 }}\r\n              >\r\n                <Collapse\r\n                  defaultActiveKey={[\"1\"]}\r\n                  style={{\r\n                    minWidth: screens.md ? \"400px\" : \"100%\",\r\n                  }}\r\n                  items={[\r\n                    {\r\n                      key: \"1\",\r\n                      label: \"Xem mức lương có thể tăng\",\r\n                      children: (\r\n                        <SalaryIncrementTable\r\n                          baseSalary={parseNumber(salary)}\r\n                          conversionType={type}\r\n                          dependents={Number(dependents) || 0}\r\n                        />\r\n                      ),\r\n                    },\r\n                  ]}\r\n                />\r\n              </motion.div>\r\n            </>\r\n          ) : (\r\n            <div\r\n              style={{\r\n                flex: 1,\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n              }}\r\n            >\r\n              <AnimatedWallet />\r\n            </div>\r\n          )}\r\n        </div>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n}\r\n","import React, { createContext, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport SalaryConverter from \"./components/ConverterDialog\";\nimport { getExchangeRates } from \"./utils/currency\";\nimport \"./index.css\";\nexport const ExchangeRateContext = createContext<Record<string, number>>({});\n\nconst App = () => {\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\n    {}\n  );\n\n  useEffect(() => {\n    getExchangeRates(setExchangeRates);\n  }, []);\n\n  return (\n    <ExchangeRateContext.Provider value={exchangeRates}>\n      <SalaryConverter />\n    </ExchangeRateContext.Provider>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"app\") as HTMLElement);\nroot.render(<App />);\n"],"names":["ConversionType","getDetailedBreakdownFromGross","gross","dependents","insuranceSalary","socialBase","Math","socialInsurance","healthInsurance","unemploymentInsurance","totalInsurance","incomeBeforeTax","dependentDeduction","taxableIncome","tax","calculateTax","monthlyTaxableIncome","annualTaxableIncome","personalDeduction","getDetailedBreakdown","salary","inputType","grossGuess","breakdown","i","error","XMLParser","parseNumber","value","numericValue","Number","getExchangeRates","setExchangeRates","console","cleanXML","response","axios","result","parser","Error","exrates","Array","exchangeRates","exrate","parseFloat","localStorage","JSON","convertAmount","amount","currency","rate","formatCurrency","motion","Infinity","Text","Typography","useToken","theme","SalaryBreakdownTable","param","token","useState","selectedCurrency","setSelectedCurrency","useEffect","cachedRates","prevRates","dataSource","columns","text","record","isGrossOrNet","Table","calculateSalaryIncrements","baseSalary","percentageIncreases","conversionType","salaryAdjustments","increasePercent","newGrossSalary","SalaryIncrementTable","customIncrease","setCustomIncrease","customRows","setCustomRows","hoveredRowKey","setHoveredRowKey","deletedRowKeys","setDeletedRowKeys","row","Object","handleDeleteRow","key","prev","prevRows","combinedData","index","_","Space","AnimatePresence","Button","DeleteOutlined","Flex","Input","e","parsedIncrease","isNaN","rowWithExtras","uuidv4","Title","useBreakpoint","Grid","SalaryConverter","setSalary","setDependents","type","setType","setBreakdown","setInsuranceSalary","undefined","hasCalculated","setHasCalculated","screens","parsedSalary","parsedDependents","parsedInsuranceSalary","validDependents","validInsuranceSalary","Card","Divider","Tooltip","inputValue","parsedValue","Radio","Collapse","AnimatedWallet","ExchangeRateContext","createContext","root","ReactDOM","document","App"],"mappings":"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"}