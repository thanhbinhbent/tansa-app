{"version":3,"file":"10.js","sources":["webpack://tansa_app/./src/utils/taxHandler.ts","webpack://tansa_app/./src/utils/currency.ts","webpack://tansa_app/./src/components/AnimatedWallet.tsx","webpack://tansa_app/./src/components/SalaryBreakdownTable.tsx","webpack://tansa_app/./src/utils/salaryIncreasment.ts","webpack://tansa_app/./src/components/SalaryIncrementTable.tsx","webpack://tansa_app/./src/components/ConverterDialog.tsx","webpack://tansa_app/./src/App.tsx"],"sourcesContent":["export enum ConversionType {\r\n  GrossToNet = \"gross_to_net\",\r\n  NetToGross = \"net_to_gross\",\r\n}\r\n\r\nexport const PERSONAL_DEDUCTION = 11_000_000;\r\nexport const DEPENDENT_DEDUCTION = 4_400_000;\r\n\r\nexport interface DetailedSalaryBreakdown {\r\n  grossSalary: number;\r\n  socialInsurance: number;\r\n  healthInsurance: number;\r\n  unemploymentInsurance: number;\r\n  totalInsurance: number;\r\n  incomeBeforeTax: number;\r\n  personalDeduction: number;\r\n  dependentDeduction: number;\r\n  taxableIncome: number;\r\n  tax: number;\r\n  netSalary: number;\r\n}\r\n\r\nexport function calculateTax(monthlyTaxableIncome: number): number {\r\n  if (monthlyTaxableIncome <= 0) return 0;\r\n  const annualTaxableIncome = monthlyTaxableIncome * 12;\r\n  let tax = 0;\r\n  if (annualTaxableIncome <= 60_000_000) {\r\n    tax = annualTaxableIncome * 0.05;\r\n  } else if (annualTaxableIncome <= 120_000_000) {\r\n    tax = 60_000_000 * 0.05 + (annualTaxableIncome - 60_000_000) * 0.1;\r\n  } else if (annualTaxableIncome <= 216_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      (annualTaxableIncome - 120_000_000) * 0.15;\r\n  } else if (annualTaxableIncome <= 384_000_000) {\r\n    tax =\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      (annualTaxableIncome - 216_000_000) * 0.2;\r\n  } else {\r\n    tax =\r\n      (annualTaxableIncome - 384_000_000) * 0.25 +\r\n      60_000_000 * 0.05 +\r\n      60_000_000 * 0.1 +\r\n      96_000_000 * 0.15 +\r\n      168_000_000 * 0.2;\r\n  }\r\n  return tax / 12;\r\n}\r\n\r\nexport function getDetailedBreakdownFromGross(\r\n  gross: number,\r\n  dependents: number\r\n): DetailedSalaryBreakdown {\r\n  const socialBase = Math.min(gross, 46_800_000);\r\n  const socialInsurance = socialBase * 0.08;\r\n  const healthInsurance = socialBase * 0.015;\r\n  const unemploymentInsurance = Math.min(gross, 99_200_000) * 0.01;\r\n  const totalInsurance = Math.round(\r\n    socialInsurance + healthInsurance + unemploymentInsurance\r\n  );\r\n  const incomeBeforeTax = Math.round(gross - totalInsurance);\r\n  const personalDeduction = PERSONAL_DEDUCTION;\r\n  const dependentDeduction = Math.round(dependents * DEPENDENT_DEDUCTION);\r\n  const taxableIncome = Math.max(\r\n    0,\r\n    incomeBeforeTax - personalDeduction - dependentDeduction\r\n  );\r\n  const tax = calculateTax(taxableIncome);\r\n  return {\r\n    grossSalary: Math.round(gross),\r\n    socialInsurance,\r\n    healthInsurance,\r\n    unemploymentInsurance,\r\n    totalInsurance,\r\n    incomeBeforeTax,\r\n    personalDeduction,\r\n    dependentDeduction,\r\n    taxableIncome,\r\n    tax,\r\n    netSalary: Math.round(incomeBeforeTax - tax),\r\n  };\r\n}\r\n\r\nexport function getDetailedBreakdown(\r\n  salary: number,\r\n  dependents: number,\r\n  inputType: ConversionType\r\n): DetailedSalaryBreakdown {\r\n  if (inputType === ConversionType.GrossToNet) {\r\n    return getDetailedBreakdownFromGross(salary, dependents);\r\n  }\r\n  let grossGuess = salary * 1.2;\r\n  let breakdown = getDetailedBreakdownFromGross(grossGuess, dependents);\r\n  for (let i = 0; i < 100; i++) {\r\n    const error = salary - breakdown.netSalary;\r\n    if (Math.abs(error) < 1) break;\r\n    grossGuess += error;\r\n    breakdown = getDetailedBreakdownFromGross(grossGuess, dependents);\r\n  }\r\n  return breakdown;\r\n}\r\n","import axios from \"axios\";\r\nimport { XMLParser } from \"fast-xml-parser\";\r\n\r\nconst parser = new XMLParser();\r\n\r\nexport enum Currency {\r\n  AUD = \"AUSTRALIAN DOLLAR\",\r\n  CAD = \"CANADIAN DOLLAR\",\r\n  CHF = \"SWISS FRANC\",\r\n  CNY = \"YUAN RENMINBI\",\r\n  DKK = \"DANISH KRONE\",\r\n  EUR = \"EURO\",\r\n  GBP = \"POUND STERLING\",\r\n  HKD = \"HONGKONG DOLLAR\",\r\n  INR = \"INDIAN RUPEE\",\r\n  JPY = \"YEN\",\r\n  KRW = \"KOREAN WON\",\r\n  KWD = \"KUWAITI DINAR\",\r\n  MYR = \"MALAYSIAN RINGGIT\",\r\n  NOK = \"NORWEGIAN KRONER\",\r\n  RUB = \"RUSSIAN RUBLE\",\r\n  SAR = \"SAUDI RIAL\",\r\n  SEK = \"SWEDISH KRONA\",\r\n  SGD = \"SINGAPORE DOLLAR\",\r\n  THB = \"THAILAND BAHT\",\r\n  USD = \"US DOLLAR\",\r\n}\r\n\r\nexport const parseNumber = (value: string | number): number => {\r\n  if (typeof value === \"number\") return value;\r\n  const numericValue = value.replace(/\\D/g, \"\");\r\n  return numericValue ? Number(numericValue) : 0;\r\n};\r\n\r\nconst EXCHANGE_RATE_API =\r\n  \"https://portal.vietcombank.com.vn/Usercontrols/TVPortal.TyGia/pXML.aspx\";\r\nconst LOCAL_STORAGE_KEY = \"exchangeRates\";\r\n\r\nexport async function getExchangeRates(\r\n  setExchangeRates: (rates: Record<string, number>) => void\r\n) {\r\n  console.log(\"Fetching latest exchange rates...\");\r\n\r\n  try {\r\n    const response = await axios.get(EXCHANGE_RATE_API, { timeout: 10000 });\r\n\r\n    const cleanXML = response.data.replace(/<!--[\\s\\S]*?-->/g, \"\");\r\n\r\n    const parser = new XMLParser({\r\n      ignoreAttributes: false,\r\n      attributeNamePrefix: \"\",\r\n    });\r\n    const result = parser.parse(cleanXML);\r\n\r\n    if (!result.ExrateList || !result.ExrateList.Exrate) {\r\n      throw new Error(\"Invalid XML format\");\r\n    }\r\n\r\n    const exrates = Array.isArray(result.ExrateList.Exrate)\r\n      ? result.ExrateList.Exrate\r\n      : [result.ExrateList.Exrate];\r\n\r\n    const exchangeRates: Record<string, number> = {};\r\n    exrates.forEach((exrate: any) => {\r\n      if (exrate.CurrencyCode && exrate.Sell && exrate.Sell !== \"-\") {\r\n        exchangeRates[exrate.CurrencyCode] = parseFloat(\r\n          exrate.Sell.replace(/,/g, \"\")\r\n        );\r\n      }\r\n    });\r\n\r\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(exchangeRates));\r\n    setExchangeRates(exchangeRates);\r\n  } catch (error) {\r\n    console.error(\"Failed to fetch exchange rates:\", error);\r\n  }\r\n}\r\n\r\nexport function convertAmount(\r\n  amount: number,\r\n  exchangeRates: Record<string, number>,\r\n  currency: string\r\n) {\r\n  const rate = exchangeRates[currency];\r\n  if (!rate) return \"N/A\";\r\n  return (amount / rate).toFixed(2);\r\n}\r\n\r\nexport const formatCurrency = (value: string | number) => {\r\n  if (!value) return \"\";\r\n  return Number(value).toLocaleString(\"vi-VN\");\r\n};\r\n","import { motion } from \"framer-motion\";\r\n\r\nconst AnimatedWallet = () => {\r\n  return (\r\n    <motion.svg\r\n      className=\"text-gray-800 dark:text-white\"\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"200\"\r\n      height=\"200\"\r\n      fill=\"none\"\r\n      viewBox=\"0 0 24 24\"\r\n      initial={{ opacity: 0, scale: 0.5 }}\r\n      animate={{ opacity: 1, scale: 1 }}\r\n      transition={{ duration: 0.5 }}\r\n    >\r\n      {/* Gradient màu động với màu chủ đạo của Ant Design */}\r\n      <defs>\r\n        <linearGradient id=\"gradientColor\" gradientTransform=\"rotate(0)\">\r\n          <motion.stop\r\n            offset=\"0%\"\r\n            stopColor=\"#1677ff\"\r\n            animate={{ stopColor: [\"#1677ff\", \"#69b1ff\", \"#1677ff\"] }}\r\n            transition={{\r\n              duration: 3,\r\n              repeat: Infinity,\r\n              ease: \"linear\",\r\n              repeatType: \"mirror\",\r\n            }}\r\n          />\r\n          <motion.stop\r\n            offset=\"100%\"\r\n            stopColor=\"#69b1ff\"\r\n            animate={{ stopColor: [\"#69b1ff\", \"#1677ff\", \"#69b1ff\"] }}\r\n            transition={{\r\n              duration: 3,\r\n              repeat: Infinity,\r\n              ease: \"linear\",\r\n              repeatType: \"mirror\",\r\n            }}\r\n          />\r\n        </linearGradient>\r\n      </defs>\r\n\r\n      <motion.path\r\n        stroke=\"url(#gradientColor)\"\r\n        strokeLinecap=\"round\"\r\n        strokeLinejoin=\"round\"\r\n        strokeWidth=\"1.3\" // Giảm stroke nhỏ hơn\r\n        d=\"M13.6 16.733c.234.269.548.456.895.534a1.4 1.4 0 0 0 1.75-.762c.172-.615-.446-1.287-1.242-1.481-.796-.194-1.41-.861-1.241-1.481a1.4 1.4 0 0 1 1.75-.762c.343.077.654.26.888.524m-1.358 4.017v.617m0-5.939v.725M4 15v4m3-6v6M6 8.5 10.5 5 14 7.5 18 4m0 0h-3.5M18 4v3m2 8a5 5 0 1 1-10 0 5 5 0 0 1 10 0Z\"\r\n        initial={{ pathLength: 0, opacity: 0 }}\r\n        animate={{ pathLength: 1, opacity: 1 }}\r\n        transition={{ duration: 1.5, ease: \"easeInOut\" }}\r\n      />\r\n    </motion.svg>\r\n  );\r\n};\r\n\r\nexport default AnimatedWallet;\r\n","import { useState, useEffect } from \"react\";\r\nimport { Table, Collapse, Typography, theme } from \"antd\";\r\nimport { convertAmount } from \"../utils/currency\";\r\n\r\nconst { Text } = Typography;\r\nconst { useToken } = theme;\r\n\r\nexport default function SalaryBreakdownTable({\r\n  breakdown,\r\n}: {\r\n  breakdown: any;\r\n}) {\r\n  const { token } = useToken();\r\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\r\n    {}\r\n  );\r\n  const [selectedCurrency, setSelectedCurrency] = useState<string>(\r\n    localStorage.getItem(\"selectedCurrency\") || \"USD\"\r\n  );\r\n\r\n  useEffect(() => {\r\n    const cachedRates = localStorage.getItem(\"exchangeRates\");\r\n    if (cachedRates) {\r\n      setExchangeRates(JSON.parse(cachedRates));\r\n    }\r\n  }, []);\r\n\r\n  const dataSource = [\r\n    {\r\n      key: \"gross\",\r\n      label: \"Lương GROSS\",\r\n      value: breakdown.grossSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n    {\r\n      key: \"social\",\r\n      label: \"Bảo hiểm xã hội (8%)\",\r\n      value: breakdown.socialInsurance,\r\n    },\r\n    {\r\n      key: \"health\",\r\n      label: \"Bảo hiểm y tế (1.5%)\",\r\n      value: breakdown.healthInsurance,\r\n    },\r\n    {\r\n      key: \"unemployment\",\r\n      label: \"Bảo hiểm thất nghiệp (1%)\",\r\n      value: breakdown.unemploymentInsurance,\r\n    },\r\n    {\r\n      key: \"incomeBeforeTax\",\r\n      label: \"Thu nhập trước thuế\",\r\n      value: breakdown.incomeBeforeTax,\r\n    },\r\n    {\r\n      key: \"taxableIncome\",\r\n      label: \"Thu nhập chịu thuế\",\r\n      value: breakdown.taxableIncome,\r\n    },\r\n    { key: \"tax\", label: \"Thuế thu nhập cá nhân\", value: breakdown.tax },\r\n    {\r\n      key: \"net\",\r\n      label: \"Lương NET\",\r\n      value: breakdown.netSalary,\r\n      color: token.colorPrimary,\r\n    },\r\n  ];\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Mục\",\r\n      dataIndex: \"label\",\r\n      key: \"label\",\r\n      render: (text: string) => <Text strong>{text}</Text>,\r\n    },\r\n    {\r\n      title: \"Giá trị\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (value: number, record: any) => (\r\n        <div>\r\n          <Text style={{ color: record.color || \"inherit\" }}>\r\n            {value.toLocaleString(\"vi-VN\")} VNĐ\r\n          </Text>\r\n          <br />\r\n          <Text type=\"secondary\">\r\n            {exchangeRates[selectedCurrency]\r\n              ? convertAmount(value, exchangeRates, selectedCurrency) +\r\n                ` ${selectedCurrency}`\r\n              : \"Đang tải...\"}\r\n          </Text>\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Collapse defaultActiveKey={[\"1\"]} className=\"result-section\">\r\n      <Collapse.Panel header=\"Kết quả\" key=\"1\">\r\n        <Table\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={false}\r\n          bordered\r\n          size=\"small\"\r\n        />\r\n      </Collapse.Panel>\r\n    </Collapse>\r\n  );\r\n}\r\n","import {\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n  getDetailedBreakdownFromGross,\r\n  getDetailedBreakdown,\r\n} from \"./taxHandler\";\r\n\r\nexport function calculateSalaryIncrements(\r\n  baseSalary: number,\r\n  percentageIncreases: number[],\r\n  conversionType: ConversionType,\r\n  dependents: number = 0\r\n) {\r\n  const salaryAdjustments = [];\r\n\r\n  for (const increasePercent of percentageIncreases) {\r\n    const newGrossSalary = Math.round(baseSalary * (1 + increasePercent / 100));\r\n\r\n    let breakdown: DetailedSalaryBreakdown;\r\n    if (conversionType === ConversionType.GrossToNet) {\r\n      breakdown = getDetailedBreakdownFromGross(newGrossSalary, dependents);\r\n    } else {\r\n      breakdown = getDetailedBreakdown(\r\n        newGrossSalary,\r\n        dependents,\r\n        ConversionType.NetToGross\r\n      );\r\n    }\r\n\r\n    salaryAdjustments.push({\r\n      baseSalary,\r\n      increasePercent,\r\n      conversionType,\r\n      newGrossSalary: Math.round(breakdown.grossSalary),\r\n      newNetSalary: Math.round(breakdown.netSalary),\r\n    });\r\n  }\r\n\r\n  return salaryAdjustments;\r\n}\r\n\r\nexport const formatCurrency = (value: string | number) => {\r\n  const number = Number(value.toString().replace(/\\D/g, \"\"));\r\n  return number.toLocaleString(\"vi-VN\");\r\n};\r\n","import { useState, useEffect } from \"react\";\r\nimport { Table, Input, Typography, Space, Flex, Collapse, Button } from \"antd\";\r\nimport { ConversionType } from \"../utils/taxHandler\";\r\nimport { calculateSalaryIncrements } from \"../utils/salaryIncreasment\";\r\nimport { convertAmount, getExchangeRates } from \"../utils/currency\";\r\n\r\nconst { Text } = Typography;\r\n\r\ninterface SalaryIncrementTableProps {\r\n  baseSalary: number;\r\n  conversionType: ConversionType;\r\n  dependents?: number;\r\n  percentageIncreases?: number[];\r\n}\r\n\r\nexport default function SalaryIncrementTable({\r\n  baseSalary,\r\n  conversionType,\r\n  dependents = 0,\r\n  percentageIncreases = [10, 15, 20, 25, 30],\r\n}: SalaryIncrementTableProps) {\r\n  const [customIncrease, setCustomIncrease] = useState<string>(\"\");\r\n  const [customRow, setCustomRow] = useState<any | null>(null);\r\n  const [selectedCurrency, setSelectedCurrency] = useState<string>(\r\n    localStorage.getItem(\"selectedCurrency\") || \"USD\"\r\n  );\r\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\r\n    {}\r\n  );\r\n\r\n  // Gọi API để lấy tỷ giá khi component mount\r\n  useEffect(() => {\r\n    getExchangeRates(setExchangeRates);\r\n  }, []);\r\n\r\n  const handleCalculateCustomIncrease = () => {\r\n    const parsedIncrease = parseFloat(customIncrease);\r\n    if (!isNaN(parsedIncrease) && parsedIncrease > 0) {\r\n      const newRow = calculateSalaryIncrements(\r\n        baseSalary,\r\n        [parsedIncrease],\r\n        conversionType,\r\n        dependents\r\n      )[0];\r\n      setCustomRow(newRow);\r\n    } else {\r\n      setCustomRow(null);\r\n    }\r\n  };\r\n\r\n  const handleDeleteCustomRow = () => {\r\n    setCustomRow(null);\r\n    setCustomIncrease(\"\");\r\n  };\r\n\r\n  const dataSource = customRow\r\n    ? [\r\n        customRow,\r\n        ...calculateSalaryIncrements(\r\n          baseSalary,\r\n          percentageIncreases,\r\n          conversionType,\r\n          dependents\r\n        ).filter((row) => row.increasePercent !== customRow.increasePercent),\r\n      ]\r\n    : calculateSalaryIncrements(\r\n        baseSalary,\r\n        percentageIncreases,\r\n        conversionType,\r\n        dependents\r\n      );\r\n\r\n  const columns = [\r\n    {\r\n      title: \"(%) tăng\",\r\n      dataIndex: \"increasePercent\",\r\n      key: \"increasePercent\",\r\n      render: (value: number, record: any) => (\r\n        <Text strong={record === customRow}>{value}%</Text>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Giá trị (VND)\",\r\n      key: \"salaryDetails\",\r\n      render: (_: any, record: any) => (\r\n        <Space direction=\"vertical\">\r\n          <Text strong={record === customRow}>\r\n            GROSS: {record.newGrossSalary.toLocaleString(\"vi-VN\")}\r\n          </Text>\r\n          <Text type=\"secondary\">\r\n            {exchangeRates[selectedCurrency]\r\n              ? convertAmount(\r\n                  record.newGrossSalary,\r\n                  exchangeRates,\r\n                  selectedCurrency\r\n                )\r\n              : \"Đang tải...\"}{\" \"}\r\n            {selectedCurrency}\r\n          </Text>\r\n          <Text strong={record === customRow}>\r\n            NET: {record.newNetSalary.toLocaleString(\"vi-VN\")}\r\n          </Text>\r\n          <Text type=\"secondary\">\r\n            {exchangeRates[selectedCurrency]\r\n              ? convertAmount(\r\n                  record.newNetSalary,\r\n                  exchangeRates,\r\n                  selectedCurrency\r\n                )\r\n              : \"Đang tải...\"}{\" \"}\r\n            {selectedCurrency}\r\n          </Text>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Xoá\",\r\n      key: \"actions\",\r\n      render: (_: any, record: any) =>\r\n        record === customRow ? (\r\n          <Button danger size=\"small\" onClick={handleDeleteCustomRow}>\r\n            Xoá\r\n          </Button>\r\n        ) : null,\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <Collapse className=\"result-section\">\r\n      <Collapse.Panel header=\"Xem mức lương có thể tăng\" key=\"1\">\r\n        <Flex vertical gap={16}>\r\n          <Flex gap={8} style={{ width: \"100%\" }}>\r\n            <Input\r\n              type=\"number\"\r\n              placeholder=\"Nhập tỉ lệ % mong muốn\"\r\n              value={customIncrease}\r\n              onChange={(e) => setCustomIncrease(e.target.value)}\r\n              style={{ flex: 1 }}\r\n            />\r\n            <Button\r\n              type=\"primary\"\r\n              onClick={handleCalculateCustomIncrease}\r\n              style={{ flex: 0.2 }}\r\n            >\r\n              Tính\r\n            </Button>\r\n          </Flex>\r\n          <Table\r\n            dataSource={dataSource}\r\n            columns={columns}\r\n            pagination={false}\r\n            bordered\r\n            rowKey=\"increasePercent\"\r\n          />\r\n        </Flex>\r\n      </Collapse.Panel>\r\n    </Collapse>\r\n  );\r\n}\r\n","import { useState } from \"react\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Input,\r\n  Radio,\r\n  Typography,\r\n  Flex,\r\n  Space,\r\n  Divider,\r\n  Grid,\r\n} from \"antd\";\r\nimport {\r\n  getDetailedBreakdown,\r\n  ConversionType,\r\n  DetailedSalaryBreakdown,\r\n} from \"../utils/taxHandler\";\r\nimport { parseNumber, formatCurrency } from \"../utils/currency\";\r\nimport \"antd/dist/reset.css\";\r\nimport AnimatedWallet from \"./AnimatedWallet\";\r\nimport SalaryBreakdownTable from \"./SalaryBreakdownTable\";\r\nimport SalaryIncrementTable from \"./SalaryIncrementTable\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst { Title, Text } = Typography;\r\nconst { useBreakpoint } = Grid;\r\n\r\nexport default function SalaryConverter() {\r\n  const [salary, setSalary] = useState<number | string>(\"\");\r\n  const [dependents, setDependents] = useState<number | string>(\"\");\r\n  const [type, setType] = useState<ConversionType>(ConversionType.GrossToNet);\r\n  const [breakdown, setBreakdown] = useState<DetailedSalaryBreakdown | null>(\r\n    null\r\n  );\r\n\r\n  const screens = useBreakpoint();\r\n\r\n  const handleConvert = () => {\r\n    const parsedSalary = Number(salary);\r\n    const parsedDependents = Number(dependents);\r\n\r\n    if (isNaN(parsedSalary) || parsedSalary <= 0) return;\r\n    const validDependents = isNaN(parsedDependents) ? 0 : parsedDependents;\r\n\r\n    const result = getDetailedBreakdown(parsedSalary, validDependents, type);\r\n    setBreakdown(result);\r\n  };\r\n\r\n  return (\r\n    <Flex\r\n      justify=\"center\"\r\n      align=\"center\"\r\n      className=\"salary-converter-container\"\r\n    >\r\n      <Card className=\"salary-converter-card\">\r\n        <Flex\r\n          gap={32}\r\n          wrap=\"wrap\"\r\n          vertical={screens.md ? false : true}\r\n          style={{ width: \"100%\" }}\r\n        >\r\n          <Flex vertical flex={1} className=\"salary-converter-column-left\">\r\n            <Title level={2} style={{ textAlign: \"center\" }}>\r\n              TANSA\r\n            </Title>\r\n            <Text type=\"secondary\" style={{ textAlign: \"center\" }}>\r\n              Công cụ tính lương GROSS, NET chính xác\r\n            </Text>\r\n\r\n            <Divider />\r\n\r\n            <Space direction=\"vertical\" size=\"large\" style={{ width: \"100%\" }}>\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Nhập mức lương (VNĐ):</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={formatCurrency(salary)}\r\n                  onChange={(e) => setSalary(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Số người phụ thuộc:</Text>\r\n                <Input\r\n                  type=\"text\"\r\n                  value={formatCurrency(dependents)}\r\n                  onChange={(e) => setDependents(parseNumber(e.target.value))}\r\n                />\r\n              </Space>\r\n\r\n              <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n                <Text strong>Loại chuyển đổi:</Text>\r\n                <Radio.Group\r\n                  value={type}\r\n                  onChange={(e) => setType(e.target.value)}\r\n                >\r\n                  <Space direction=\"vertical\">\r\n                    <Radio value={ConversionType.GrossToNet}>GROSS ➜ NET</Radio>\r\n                    <Radio value={ConversionType.NetToGross}>NET ➜ GROSS</Radio>\r\n                  </Space>\r\n                </Radio.Group>\r\n              </Space>\r\n\r\n              <Button type=\"primary\" block onClick={handleConvert}>\r\n                Chuyển đổi\r\n              </Button>\r\n            </Space>\r\n          </Flex>\r\n\r\n          <Flex\r\n            vertical\r\n            flex={1}\r\n            align=\"center\"\r\n            justify=\"center\"\r\n            className=\"salary-converter-column-right\"\r\n          >\r\n            {breakdown ? (\r\n              <motion.div\r\n                initial={{ opacity: 0, y: -10 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ duration: 0.5 }}\r\n                style={{ width: \"100%\" }}\r\n              >\r\n                <SalaryBreakdownTable breakdown={breakdown} />\r\n                <SalaryIncrementTable\r\n                  baseSalary={parseNumber(salary)}\r\n                  conversionType={type}\r\n                  dependents={Number(dependents) || 0}\r\n                />\r\n              </motion.div>\r\n            ) : (\r\n              <AnimatedWallet />\r\n            )}\r\n          </Flex>\r\n        </Flex>\r\n      </Card>\r\n    </Flex>\r\n  );\r\n}\r\n","import React, { createContext, useEffect, useState } from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport SalaryConverter from \"./components/ConverterDialog\";\nimport { getExchangeRates } from \"./utils/currency\";\nimport \"./index.css\";\nexport const ExchangeRateContext = createContext<Record<string, number>>({});\n\nconst App = () => {\n  const [exchangeRates, setExchangeRates] = useState<Record<string, number>>(\n    {}\n  );\n\n  useEffect(() => {\n    getExchangeRates(setExchangeRates);\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <ExchangeRateContext.Provider value={exchangeRates}>\n        <SalaryConverter />\n      </ExchangeRateContext.Provider>{\" \"}\n    </div>\n  );\n};\n\nconst root = ReactDOM.createRoot(document.getElementById(\"app\") as HTMLElement);\nroot.render(<App />);\n"],"names":["ConversionType","getDetailedBreakdownFromGross","gross","dependents","socialBase","Math","socialInsurance","healthInsurance","unemploymentInsurance","totalInsurance","incomeBeforeTax","dependentDeduction","taxableIncome","tax","calculateTax","monthlyTaxableIncome","annualTaxableIncome","personalDeduction","getDetailedBreakdown","salary","inputType","grossGuess","breakdown","i","error","XMLParser","parseNumber","value","numericValue","Number","getExchangeRates","setExchangeRates","console","cleanXML","response","axios","result","parser","Error","exrates","Array","exchangeRates","exrate","parseFloat","localStorage","JSON","convertAmount","amount","currency","rate","formatCurrency","motion","Infinity","Text","Typography","useToken","theme","SalaryBreakdownTable","param","token","useState","selectedCurrency","setSelectedCurrency","useEffect","cachedRates","dataSource","columns","text","record","Collapse","Table","calculateSalaryIncrements","baseSalary","percentageIncreases","conversionType","salaryAdjustments","increasePercent","newGrossSalary","SalaryIncrementTable","customIncrease","setCustomIncrease","customRow","setCustomRow","handleDeleteCustomRow","row","_","Space","Button","Flex","Input","e","parsedIncrease","isNaN","Title","useBreakpoint","Grid","SalaryConverter","setSalary","setDependents","type","setType","setBreakdown","screens","Card","Divider","Radio","parsedSalary","parsedDependents","AnimatedWallet","ExchangeRateContext","createContext","root","ReactDOM","document","App"],"mappings":"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"}